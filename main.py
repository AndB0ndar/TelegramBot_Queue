from telebot import TeleBot
from telebot import types
import re
from random import randint


bot = TeleBot('5516733632:AAEMeOASkrHYkRTtbeFtqDeD_2UPQjNH8y4')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
msg_quit = "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
markup.add(types.KeyboardButton(msg_quit))
msg_add = "–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å"
markup.add(types.KeyboardButton(msg_add))
msg_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏"
markup.add(types.KeyboardButton(msg_info))


def generating_title():
    """
    A function to generate the name of the queue if it has not been entered by the user
    Options:
        None
    Return value:
        (str): generated name
    """
    return "queue_" + str(randint(10 ** 5, 10 ** 10))


def create(title):
    """
    Queue creation function
    Options:
        title (str): queue title
    Return value:
        None
    """
    pass


def connect(title):
    """
    A function connecting to queue by title
    Options:
        title (str): queue title
    Return value:
        (bool): success/failure of connecting to the queue by title
    """
    return True


def connect_by_key(key):
    """
    A function connecting to queue by key
    Options:
        key (str): queue key
    Return value:
        (bool): success/failure of connecting to the queue by key
        (str): title queue
    """
    return True, "–ì–†–£–ü–ü–ê"


def disconnect():
    """
    Disconnect from queue function
    Options:
    Return value:
        (bool): success/failure of disconnect from queue
    """
    return True


def quite():
    """
    Dequeue function
    Options:
    Return value:
        (bool): success/failure of dequeuing
    """
    return True


def add():
    """
    Add to queue function
    Options:
    Return value:
        (bool): success/failure of adding to the queue
    """
    return True


def info():
    """
    A function giving information about the queue
    Options:
        None
    Return value:
        (str): queue information
    """
    return "INFO"


@bot.message_handler(commands=['start'])
def decorate_info(message):
    """the decorator issuing the starting information"""
    answer = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–æ—á–µ—Ä–µ–¥—å!\n"
    answer += "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏ —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å\n"
    answer += "\n–í–≤–µ–¥–∏—Ç–µ:\n"
    answer += "/create <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏> - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
    answer += "/connect <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏> - —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
    answer += "/connect_by_key <–∫–ª—é—á –æ—á–µ—Ä–µ–¥–∏> - —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
    answer += "\n/disconnect - —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –æ—á–µ—Ä–µ–¥—å"
    bot.send_message(message.from_user.id, answer)


@bot.message_handler(commands=['create'])
def decorate_create(message):
    """the decorator called when a command is given to create the queue"""
    command = re.split(r' ', message.text, 1)
    title = command[1] if len(command) == 2 else generating_title()
    answer = "–ö–ª—é—á –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏: " + str(create(title))
    bot.send_message(message.from_user.id, answer, reply_markup=markup)


@bot.message_handler(commands=['connect', 'connect_by_key'])
def decorate_connect(message):
    """decorator called when a command is given to connection the queue"""
    command = re.split(r' ', message.text, 1)
    if len(command) == 2:
        fl, title = connect(command[1]), command[1] if command[0] == "/connect" else connect_by_key(command[1])
        if fl:
            answer = "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ: " + title
        else:
            answer = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
        bot.send_message(message.from_user.id, answer, reply_markup=markup)
    else:
        answer = "–í—ã –Ω–µ –≤–≤–µ–ª–∏ "
        answer += "–∏–º—è" if command[0] == "/connect" else "–∫–ª—é—á"
        answer += " –æ—á–µ—Ä–µ–¥–∏"
        bot.send_message(message.from_user.id, answer)


@bot.message_handler(commands=['disconnect'])
def decorate_disconnect(message):
    """the decorator called when a command is given to disconnect from the queue"""
    fl = disconnect()
    if fl:
        answer = "–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –æ—á–µ—Ä–µ–¥–∏"
    else:
        answer = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
    bot.send_message(message.from_user.id, answer, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def decorate_main(message):
    """the main decorator implementing the main interface"""
    if message.text == msg_quit:
        fl = quite()
        if fl:
            answer = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
        else:
            answer = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
    elif message.text == msg_add:
        fl = add()
        if fl:
            answer = "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å"
        else:
            answer = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
    elif message.text == msg_info:
        answer = info()
    else:
        bot.reply_to(message, "–Ø –Ω–µ –∑–∞–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        answer = "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"
    bot.send_message(message.from_user.id, answer, reply_markup=markup)


if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
# bot.infinity_polling()
